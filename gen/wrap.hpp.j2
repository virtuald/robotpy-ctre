{% macro param_comma(fn) %}
{% if fn.parameters | count > 1 %}, {% endif %}
{% endmacro %}

{% macro fncall_params(params) -%}
{% for p in params %}
{{ p.raw_type }} {{ p.name }}{% if not loop.last %}, {% endif %}
{% endfor %}
{%- endmacro %}

{% macro ref_decls(params) -%}
{% for param in params -%}
{% if param.pointer %}
{{ param.raw_type }} {{ param.name }}; 
{%- endif %}
{% endfor %}
{%- endmacro %}

{% macro call_params(params) -%}
{% for param in params -%}
{% if param.pointer %}&{% endif %}{{ param.name }}{% if not loop.last %}, {% endif %}
{% endfor %}
{%- endmacro %}

{% for header in headers %}
#include <{{ header.fname }}>
{% endfor %}

class {{ module_name }}{% if inherits is defined %} : public {{ inherits }}{% endif %} {

  void * m_handle;

public:
  {% for header in headers %}
  {% for fn in header.functions %}
  {% if fn.x_name == '__init__' %}
  {{ module_name }}({{ fncall_params(fn.parameters) }}) {
    m_handle = {{ fn.name }}({{ fn.parameters | join(', ', attribute='name') }});
  }
  {% else %}
  {{ fncall_return(fn) }} {{ fn.x_name }}({{ fn.x_in_params | join(', ', attribute='x_decl') }}) {
    {{ fn.x_refdecls }}
    {{ fn.x_callstart }} {{ fn.name }}(m_handle{{ param_comma(fn) }}{{ call_params(fn.parameters[1:]) }} {{ fn.x_callend }});
    {{ fn.x_return }}
  }
  
  
  {% endif %}
  
  {% endfor %}
  {% endfor %}
};

